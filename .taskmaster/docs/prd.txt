**Note:** This PRD is for an updated version of the app located in this repository: [https://github.com/neonwatty/bleep-that-shit](https://github.com/neonwatty/bleep-that-shit)

**Implementation Note:** Basic Rails 8 authentication is already set up in this repository, so authentication does not need to be included as a development task in this PRD.

# Overview
A privacy-first, browser-based tool to remove unwanted words (and video profanity) from audio and video content. This version is a hosted Rails 8 web app that enables users to upload content, customize censorship options, and process media entirely in the browser. No media is sent to the server unless the user explicitly opts in. Target users include hobbyist content creators, educators, podcasters, streamers, and privacy-conscious individuals who value simplicity and on-device processing.

# Core Features
- **In-browser transcription & timestamping** via Whisper ONNX (transformers.js)
- **Audio/video upload** with browser-side extraction, bleep insertion, and remixing
- **Bleep customization**: multiple sounds, pre/post padding slider
- **Long-file support** through automatic chunking for stable transcription
- **User account layer** with Rails 8 built-in auth
- **Optional storage** with a "Store file with us" checkbox and direct-to-S3 upload
- **Transcription cancel and retry**: Users can cancel an in-progress transcription and retry failed or cancelled jobs
- **Web Worker-based processing**: Transcription and audio extraction run in a Web Worker for true hard cancel and UI responsiveness
- **Robust MP4 support**: Video files are supported via in-browser audio extraction and two-step processing (extract, then transcribe)
- **Enhanced chunk progress UI**: Progress bar and visual stepper for chunked transcription, with condensed display for large numbers of chunks, providing clear feedback for long files.

# User Experience
## User Personas
- Emma the Educator: Quickly sanitizes classroom videos privately
- Tom the Podcaster: Wants seamless swear removal without delay
- Lisa the Streamer: Uses multiple bleeps for Twitch VODs
- Novice User: Values zero setup and guided workflows

## Key User Flows
**Guest Flow:**
1. Upload audio or video
2. Select bleep sound and padding
3. Process in-browser and download
4. Optionally "Store file with us" for media retention
5. Cancel or retry transcription as needed

**Account Flow:**
1. Sign up / sign in via Rails 8 built-in auth
2. Perform the same flow as guest
3. Access job history and stored media (if opted in)

## UI/UX Considerations
- Privacy by default: Media processed client-side; storage is optional
- Simplicity: Clean UI, minimal steps, clear feedback and error messages
- Feedback-rich: Chunked progress indicators (progress bar and stepper), previews, user control, and robust error handling for long files.
- Compatibility: Broad browser support with fallback methods
- Cancel button appears during transcription; retry available after cancel or error

# Technical Architecture
## System Components
- **Frontend**: Rails 8 + Vite-Ruby + Vanilla JS (upload UI, auth, metadata)
- **Client-side Processing**: transformers.js + ONNX Whisper models for transcription; Web Audio API for manipulation; audio/video muxing via FFmpeg WASM or Canvas + MediaRecorder
- **Web Worker**: All transcription and audio extraction logic runs in a dedicated worker for hard cancel and UI responsiveness
- **Optional Backend**: Rails 8 built-in auth; ActiveStorage â†’ S3 (direct upload, opt-in)
- **Database**: PostgreSQL storing Users, AudioJobs, BleepConfigs, and optional StoredMedia

## Data Models
- **User** â€“ via Rails 8 auth
- **AudioJob** â€“ metadata: file type, status, model, padding, bleeps, opt-in flag
- **BleepConfig** â€“ reusable settings (optional)
- **StoredMedia** â€“ optional references to ActiveStorage blobs

## APIs and Integrations
- transformers.js (ONNX Whisper models) â€“ in-browser ASR with timestamps
- FFmpeg WASM â€“ media extraction and muxing
- Web Audio API, Canvas + MediaRecorder â€“ for browser-native workflows

## Infrastructure Requirements
- Hosting: Standard Rails 8 deployment (Heroku, AWS, etc.)
- CDN: Whisper ONNX model delivery via Hugging Face + CDN
- Storage: Optional S3 via direct upload for media retention
- Background Jobs: ActiveJob to manage metadata and cleanup
- Privacy Compliance: Default no retention; storage based on opt-in; auto-deletion after retention window

# Development Roadmap
## MVP Requirements
- Rails 8 backend with built-in auth
- JS frontend for file upload and client-side audio processing
- transformers.js + Whisper base model + Web Audio API for bleeping
- Bleep sound choice + padding slider + basic UI
- "Store file with us" metadata flag
- AudioJob metadata tracking and download
- Cancel and retry functionality for transcription (UI and technical)
- Web Worker-based processing for transcription and extraction
- Robust MP4 (video) support with two-step extraction and transcription
- Playwright test suite updated: Fuzzy matching tests now robustly count matches by DOM, not text parsing. Cancel test removed as feature is deprecated.
- All Playwright tests pass as of the latest run.
- Enhanced chunking UI and feedback system for long files, including condensed stepper for large numbers of chunks

## Future Enhancements
- Video support: audio extraction and remix via FFmpeg WASM or Canvas/MediaRecorder
- Expanded bleep library with previews and user uploads
- Device-capability-based model toggle
- Job history + downloads for signed users
- Optional media storage with S3
- Cross-browser support and error handling
- User-defined BleepConfig presets
- Team/organization account support
- Collaboration features (comments, shared jobs)
- Server-side fallback processing
- API endpoints for integration
- Mobile UI optimization and analytics features

# Logical Dependency Chain
- Foundation: Rails 8 backend, authentication, and basic frontend
- In-browser audio processing and bleeping (Whisper, Web Audio API)
- UI for upload, bleep selection, and download
- Optional storage and account features
- Video support and advanced features layered on top
- Prioritize getting a working, privacy-first audio bleeping flow before expanding to video and storage

# Risks and Mitigations
| Risk Area                   | Mitigation                                                           |
| --------------------------- | -------------------------------------------------------------------- |
| ONNX model load/performance | CDN caching, lightweight base model fallback, performance monitoring |
| Video muxing complexity     | Early prototyping, browser detection, choosing optimal muxing method |
| Optional storage opt-in     | Clear consent UI, direct S3 uploads, auto-deletion policy            |
| Auth conflicts              | Use Rails 8 built-in auth; avoid Devise complexity                   |
| Browser performance         | Chunking for large files; device performance detection               |
| Cross-browser issues        | Browser matrix support, fallback implementation, thorough QA testing |

# Appendix
- Research findings: See pre-prd.md for detailed technical exploration and rationale
- Technical specifications: See above architecture and data model sections

## Resources for transformers.js Functionality
- **Whisper Base Timestamped ONNX Model:** [https://huggingface.co/onnx-community/whisper-base_timestamped](https://huggingface.co/onnx-community/whisper-base_timestamped)
- **Whisper Large-v3 Turbo Timestamped ONNX Model:** [https://huggingface.co/onnx-community/whisper-large-v3-turbo_timestamped](https://huggingface.co/onnx-community/whisper-large-v3-turbo_timestamped)
- **Whisper Timestamped React Demo (transformers.js):** [https://github.com/huggingface/transformers.js-examples/tree/main/whisper-word-timestamps](https://github.com/huggingface/transformers.js-examples/tree/main/whisper-word-timestamps)

# Home Page & Branding (2024-06 Update)
- The app now features a dedicated home page as the root route, introducing users to the workflow, privacy guarantees, and the open-source technologies powering the app.
- The home page includes:
  - Bold branding: "Bleep That Sh*t!"
  - Tagline: "Make someone sound naughty ðŸ˜ˆ or make your content more Ad-friendly. Transcribe, censor, and bleep audio/video â€” all in your browser, 100% private."
  - Short description emphasizing local-only processing and privacy.
  - Step-by-step workflow overview with icons.
  - Technology highlights: huggingface.js, ffmpeg.wasm, Web Audio API, Plyr.
  - Calls to action: "Bleep Your Sh*t!" and "Transcription Sampler" buttons.
- The navbar has been updated:
  - "Bleep That Sh*t!" is now a link to the home page, styled as bold text.
  - "Transcription Sampler" and "Bleep Your Sh*t!" are styled as flashy, colorful buttons.
  - "Sign Up" and "Sign In" buttons are hidden for now, but backend auth remains available.
- All references to "Frame Miner" have been replaced with "Bleep That Sh*t!" in the UI and tab titles.
- The user experience and marketing copy now strongly emphasize privacy-first, local-only processing.

# Testing & QA
- Playwright test suite covers all critical flows, including robust fuzzy matching and chunking UI. All tests pass as of the latest run. 